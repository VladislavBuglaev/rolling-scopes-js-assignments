{"version":3,"sources":["11-katas-2-tasks.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAS,gBAAT,CAA0B,WAA1B,EAAuC;AACnC,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADmC;CAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,UAAU,QAAV,CAAmB,IAAnB,EAAyB,OAAzB,EAAkC;AAC9B,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CAD8B;CAAlC;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAM,YAAY;AACd,mBAAe,CAAf;AACA,gBAAY,CAAZ;AACA,eAAW,CAAX;AACA,WAAO,CAAP;AACA,cAAU,CAAV;AACA,iBAAa,CAAb;AACA,cAAU,CAAV;AACA,aAAS,CAAT;AACA,cAAU,CAAV;CATE;;AAYN,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AAC5B,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CAD4B;CAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,UAAU,mBAAV,CAA8B,MAA9B,EAAsC;AACnC,UAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADmC;CAAtC;;AAKA,OAAO,OAAP,GAAiB;AACb,sBAAmB,gBAAnB;AACA,cAAU,QAAV;AACA,eAAW,SAAX;AACA,sBAAkB,gBAAlB;AACA,yBAAqB,mBAArB;CALJ","file":"11-katas-2-tasks-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Returns the bank account number parsed from specified string.\n *\n * You work for a bank, which has recently purchased an ingenious machine to assist in reading letters and faxes sent in by branch offices.\n * The machine scans the paper documents, and produces a string with a bank account that looks like this:\n *\n *    _  _     _  _  _  _  _\n *  | _| _||_||_ |_   ||_||_|\n *  ||_  _|  | _||_|  ||_| _|\n *\n * Each string contains an account number written using pipes and underscores.\n * Each account number should have 9 digits, all of which should be in the range 0-9.\n *\n * Your task is to write a function that can take bank account string and parse it into actual account numbers.\n *\n * @param {string} bankAccount\n * @return {number}\n *\n * Example of return :\n *\n *   '    _  _     _  _  _  _  _ \\n'+\n *   '  | _| _||_||_ |_   ||_||_|\\n'+     =>  123456789\n *   '  ||_  _|  | _||_|  ||_| _|\\n'\n *\n *   ' _  _  _  _  _  _  _  _  _ \\n'+\n *   '| | _| _|| ||_ |_   ||_||_|\\n'+     => 23056789\n *   '|_||_  _||_| _||_|  ||_| _|\\n',\n *\n *   ' _  _  _  _  _  _  _  _  _ \\n'+\n *   '|_| _| _||_||_ |_ |_||_||_|\\n'+     => 823856989\n *   '|_||_  _||_| _||_| _||_| _|\\n',\n *\n */\nfunction parseBankAccount(bankAccount) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the string, but with line breaks inserted at just the right places to make sure that no line is longer than the specified column number.\n * Lines can be broken at word boundaries only.\n *\n * @param {string} text\n * @param {number} columns\n * @return {Iterable.<string>}\n *\n * @example :\n *\n *  'The String global object is a constructor for strings, or a sequence of characters.', 26 =>  'The String global object',\n *                                                                                                'is a constructor for',\n *                                                                                                'strings, or a sequence of',\n *                                                                                                'characters.'\n *\n *  'The String global object is a constructor for strings, or a sequence of characters.', 12 =>  'The String',\n *                                                                                                'global',\n *                                                                                                'object is a',\n *                                                                                                'constructor',\n *                                                                                                'for strings,',\n *                                                                                                'or a',\n *                                                                                                'sequence of',\n *                                                                                                'characters.'\n */\nfunction* wrapText(text, columns) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the rank of the specified poker hand.\n * See the ranking rules here: https://en.wikipedia.org/wiki/List_of_poker_hands.\n *\n * @param {array} hand\n * @return {PokerRank} rank\n *\n * @example\n *   [ '4♥','5♥','6♥','7♥','8♥' ] => PokerRank.StraightFlush\n *   [ 'A♠','4♠','3♠','5♠','2♠' ] => PokerRank.StraightFlush\n *   [ '4♣','4♦','4♥','4♠','10♥' ] => PokerRank.FourOfKind\n *   [ '4♣','4♦','5♦','5♠','5♥' ] => PokerRank.FullHouse\n *   [ '4♣','5♣','6♣','7♣','Q♣' ] => PokerRank.Flush\n *   [ '2♠','3♥','4♥','5♥','6♥' ] => PokerRank.Straight\n *   [ '2♥','4♦','5♥','A♦','3♠' ] => PokerRank.Straight\n *   [ '2♥','2♠','2♦','7♥','A♥' ] => PokerRank.ThreeOfKind\n *   [ '2♥','4♦','4♥','A♦','A♠' ] => PokerRank.TwoPairs\n *   [ '3♥','4♥','10♥','3♦','A♠' ] => PokerRank.OnePair\n *   [ 'A♥','K♥','Q♥','2♦','3♠' ] =>  PokerRank.HighCard\n */\nconst PokerRank = {\n    StraightFlush: 8,\n    FourOfKind: 7,\n    FullHouse: 6,\n    Flush: 5,\n    Straight: 4,\n    ThreeOfKind: 3,\n    TwoPairs: 2,\n    OnePair: 1,\n    HighCard: 0\n}\n\nfunction getPokerHandRank(hand) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the rectangles sequence of specified figure.\n * The figure is ASCII multiline string comprised of minus signs -, plus signs +, vertical bars | and whitespaces.\n * The task is to break the figure in the rectangles it is made of.\n *\n * NOTE: The order of rectanles does not matter.\n * \n * @param {string} figure\n * @return {Iterable.<string>} decomposition to basic parts\n * \n * @example\n *\n *    '+------------+\\n'+\n *    '|            |\\n'+\n *    '|            |\\n'+              '+------------+\\n'+\n *    '|            |\\n'+              '|            |\\n'+         '+------+\\n'+          '+-----+\\n'+\n *    '+------+-----+\\n'+       =>     '|            |\\n'+     ,   '|      |\\n'+     ,    '|     |\\n'+\n *    '|      |     |\\n'+              '|            |\\n'+         '|      |\\n'+          '|     |\\n'+\n *    '|      |     |\\n'               '+------------+\\n'          '+------+\\n'           '+-----+\\n'\n *    '+------+-----+\\n'\n *\n *\n *\n *    '   +-----+     \\n'+\n *    '   |     |     \\n'+                                    '+-------------+\\n'+\n *    '+--+-----+----+\\n'+              '+-----+\\n'+          '|             |\\n'+\n *    '|             |\\n'+      =>      '|     |\\n'+     ,    '|             |\\n'+\n *    '|             |\\n'+              '+-----+\\n'           '+-------------+\\n'\n *    '+-------------+\\n'\n */\nfunction* getFigureRectangles(figure) {\n   throw new Error('Not implemented');\n}\n\n\nmodule.exports = {\n    parseBankAccount : parseBankAccount,\n    wrapText: wrapText,\n    PokerRank: PokerRank,\n    getPokerHandRank: getPokerHandRank,\n    getFigureRectangles: getFigureRectangles\n};\n"]}