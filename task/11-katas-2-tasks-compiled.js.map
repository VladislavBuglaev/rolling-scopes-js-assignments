{"version":3,"sources":["11-katas-2-tasks.js"],"names":[],"mappings":"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","file":"11-katas-2-tasks-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Returns the bank account number parsed from specified string.\n *\n * You work for a bank, which has recently purchased an ingenious machine to assist in reading letters and faxes sent in by branch offices.\n * The machine scans the paper documents, and produces a string with a bank account that looks like this:\n *\n *    _  _     _  _  _  _  _\n *  | _| _||_||_ |_   ||_||_|\n *  ||_  _|  | _||_|  ||_| _|\n *\n * Each string contains an account number written using pipes and underscores.\n * Each account number should have 9 digits, all of which should be in the range 0-9.\n *\n * Your task is to write a function that can take bank account string and parse it into actual account numbers.\n *\n * @param {string} bankAccount\n * @return {number}\n *\n * Example of return :\n *\n *   '    _  _     _  _  _  _  _ \\n'+\n *   '  | _| _||_||_ |_   ||_||_|\\n'+     =>  123456789\n *   '  ||_  _|  | _||_|  ||_| _|\\n'\n *\n *   ' _  _  _  _  _  _  _  _  _ \\n'+\n *   '| | _| _|| ||_ |_   ||_||_|\\n'+     => 23056789\n *   '|_||_  _||_| _||_|  ||_| _|\\n',\n *\n *   ' _  _  _  _  _  _  _  _  _ \\n'+\n *   '|_| _| _||_||_ |_ |_||_||_|\\n'+     => 823856989\n *   '|_||_  _||_| _||_| _||_| _|\\n',\n *\n */\nfunction parseBankAccount(bankAccount) {\n    var result ='';\n    var arr = bankAccount.split('\\n');\n    var pattern = RegExp(\"(.{3})\");\n    arr = arr.map((element)=>element.split(pattern));\n\n    for (var i = 0; i<arr[0].length; i++) {\n\n        if (arr[0][i]==='   ' && arr[1][i]=== '  |') result+=1;\n        if (arr[2][i]=== '|_ ')                      result+=2;\n        if (arr[1][i]===' _|' && arr[2][i]===' _|')  result+=3;\n        if (arr[0][i]==='   ' && arr[1][i]=== '|_|') result+=4;\n        if (arr[1][i]==='|_ ' && arr[2][i]===' _|')  result+=5;\n        if (arr[1][i]==='|_ ' && arr[2][i]==='|_|')  result+=6;\n        if (arr[0][i]===' _ ' && arr[2][i]==='  |')  result+=7;\n        if (arr[1][i]==='|_|' && arr[2][i]==='|_|')  result+=8;\n        if (arr[1][i]==='|_|' && arr[2][i]===' _|')  result+=9;\n        if (arr[1][i]==='| |' && arr[2][i]==='|_|')  result+=0;\n    }\n    return result;\n}\n\n\n/**\n * Returns the string, but with line breaks inserted at just the right places to make sure that no line is longer than the specified column number.\n * Lines can be broken at word boundaries only.\n *\n * @param {string} text\n * @param {number} columns\n * @return {Iterable.<string>}\n *\n * @example :\n *\n *  'The String global object is a constructor for strings, or a sequence of characters.', 26 =>  'The String global object',\n *                                                                                                'is a constructor for',\n *                                                                                                'strings, or a sequence of',\n *                                                                                                'characters.'\n *\n *  'The String global object is a constructor for strings, or a sequence of characters.', 12 =>  'The String',\n *                                                                                                'global',\n *                                                                                                'object is a',\n *                                                                                                'constructor',\n *                                                                                                'for strings,',\n *                                                                                                'or a',\n *                                                                                                'sequence of',\n *                                                                                                'characters.'\n */\nfunction* wrapText(text, columns) {\n    var result = '';\n    if (text.length<columns) return yield text;\n\n        while (text) {\n            var edge = text.slice(0, columns + 1).lastIndexOf(' ');\n            if (edge > 0) {\n                result = text.slice(0, edge);\n                yield result.trim();\n                text = text.slice(edge).trim();\n            }\n            else return yield text;\n\n        }\n}\n\n\n\n/**\n * Returns the rank of the specified poker hand.\n * See the ranking rules here: https://en.wikipedia.org/wiki/List_of_poker_hands.\n *\n * @param {array} hand\n * @return {PokerRank} rank\n *\n * @example\n *   [ '4♥','5♥','6♥','7♥','8♥' ] => PokerRank.StraightFlush\n *   [ 'A♠','4♠','3♠','5♠','2♠' ] => PokerRank.StraightFlush\n *   [ '4♣','4♦','4♥','4♠','10♥' ] => PokerRank.FourOfKind\n *   [ '4♣','4♦','5♦','5♠','5♥' ] => PokerRank.FullHouse\n *   [ '4♣','5♣','6♣','7♣','Q♣' ] => PokerRank.Flush\n *   [ '2♠','3♥','4♥','5♥','6♥' ] => PokerRank.Straight\n *   [ '2♥','4♦','5♥','A♦','3♠' ] => PokerRank.Straight\n *   [ '2♥','2♠','2♦','7♥','A♥' ] => PokerRank.ThreeOfKind\n *   [ '2♥','4♦','4♥','A♦','A♠' ] => PokerRank.TwoPairs\n *   [ '3♥','4♥','10♥','3♦','A♠' ] => PokerRank.OnePair\n *   [ 'A♥','K♥','Q♥','2♦','3♠' ] =>  PokerRank.HighCard\n */\nconst PokerRank = {\n    StraightFlush: 8,\n    FourOfKind: 7,\n    FullHouse: 6,\n    Flush: 5,\n    Straight: 4,\n    ThreeOfKind: 3,\n    TwoPairs: 2,\n    OnePair: 1,\n    HighCard: 0\n}\n\nfunction getPokerHandRank(hand) {\n    function IndexOfCardByValue(value) {return 'A234567891JQK'.indexOf(value.slice(0,1))}\n\n    function indexOfSuit(value) {\n        return '♣♦♥♠'.indexOf(value.slice(-1)) * 13;\n    }\n\n    function equalityComparison(num1, num2) {\n        return cardIndex[num1]===cardIndex[num2];\n    }\n\n    function notEqualityСomparison(num1, num2) {\n        return cardIndex[num1]!==cardIndex[num2];\n    }\n\n    function equalAndnotEqual(equalityComparison, notEqualityСomparison) {\n        return equalityComparison && notEqualityСomparison;\n    }\n\n    function noName(value) {\n        return value[4]-value[0]===4 && value[1]!==0\n            || value[4]-value[1]===3 && value[0]===0 && value[1]===9;\n    }\n\n    var cardIndex = hand.map((element)=>{return IndexOfCardByValue(element)});\n    var indexSuit = hand.map((element)=>{return indexOfSuit(element)});\n    var IndexInDeck = hand.map((element)=>{return indexOfSuit(element) + IndexOfCardByValue(element)});\n\n    cardIndex = cardIndex.sort((a, b)=>{return a - b});\n    IndexInDeck = IndexInDeck.sort((a, b)=>{return a - b});\n    indexSuit = indexSuit.sort((a, b)=>{return a - b});\n\n    if (noName(IndexInDeck))return PokerRank.StraightFlush;\n    if (equalAndnotEqual(equalityComparison(0, 3),notEqualityСomparison(0, 4))\n        || equalAndnotEqual(equalityComparison(1, 4),notEqualityСomparison(0, 1))) return PokerRank.FourOfKind;\n    if (equalAndnotEqual(equalityComparison(0, 2),notEqualityСomparison(0, 3)) && equalityComparison(3,4)\n        || equalAndnotEqual(equalityComparison(2, 4),notEqualityСomparison(1, 2))) return PokerRank.FullHouse;\n    if (indexSuit[0]=== indexSuit[4]) return PokerRank.Flush;\n    if (noName(cardIndex)) return PokerRank.Straight;\n    if (equalAndnotEqual(equalityComparison(0, 2),notEqualityСomparison(2, 3))\n        || equalAndnotEqual(equalityComparison(2, 4),notEqualityСomparison(1, 2))\n        || equalAndnotEqual(equalityComparison(1, 3),notEqualityСomparison(1, 0))) return PokerRank.ThreeOfKind;\n    else{\n        var obj = {};\n\n        for (var i = 0; i < cardIndex.length; i++) {\n            var str = cardIndex[i];\n            obj[str] = true;\n        }\n        if (Object.keys(obj).length===3) return PokerRank.TwoPairs;\n        if (Object.keys(obj).length===4) return PokerRank.OnePair;\n    }\n    return PokerRank.HighCard;\n}\n\n\n/**\n * Returns the rectangles sequence of specified figure.\n * The figure is ASCII multiline string comprised of minus signs -, plus signs +, vertical bars | and whitespaces.\n * The task is to break the figure in the rectangles it is made of.\n *\n * NOTE: The order of rectanles does not matter.\n * \n * @param {string} figure\n * @return {Iterable.<string>} decomposition to basic parts\n * \n * @example\n *\n *    '+------------+\\n'+\n *    '|            |\\n'+\n *    '|            |\\n'+              '+------------+\\n'+\n *    '|            |\\n'+              '|            |\\n'+         '+------+\\n'+          '+-----+\\n'+\n *    '+------+-----+\\n'+       =>     '|            |\\n'+     ,   '|      |\\n'+     ,    '|     |\\n'+\n *    '|      |     |\\n'+              '|            |\\n'+         '|      |\\n'+          '|     |\\n'+\n *    '|      |     |\\n'               '+------------+\\n'          '+------+\\n'           '+-----+\\n'\n *    '+------+-----+\\n'\n *\n *\n *\n *    '   +-----+     \\n'+\n *    '   |     |     \\n'+                                    '+-------------+\\n'+\n *    '+--+-----+----+\\n'+              '+-----+\\n'+          '|             |\\n'+\n *    '|             |\\n'+      =>      '|     |\\n'+     ,    '|             |\\n'+\n *    '|             |\\n'+              '+-----+\\n'           '+-------------+\\n'\n *    '+-------------+\\n'\n */\nfunction* getFigureRectangles(figure) {\n    var countStr = 0;\n    var countCol = 0;\n    var x=0;\n    var y=0;\n    var points = [];\n    var matrix = figure.split('\\n');\n\n    function topLeftCornerOfRectangles() {\n        return matrix[j][i] === '+'\n            && matrix[j+1][i] !== ' '\n            && matrix[j][i + 1] !== undefined\n            && matrix[j + 1][i] !== undefined\n            && matrix[j][i + 1] !== ' ';\n    }\n\n        for (var j = 0; j < matrix.length; j++) {\n            for (var i = 0; i < matrix[0].length; i++) {\n                if (matrix[j][i] === '+' && matrix[j + 1][i] === ' ' && matrix[j][i + 1] === undefined\n                    || matrix[j][i] === '+' && matrix[j + 1][i] === undefined && matrix[j][i + 1] === ' ') {\n                    points.push(j);\n                    points.push(i);\n                }\n            }\n        }\n\n    for (var j = 0; j < matrix.length; j++) {\n        for (var i = 0; i < matrix[0].length; i++) {\n            if (topLeftCornerOfRectangles(j, i)){\n                x = i+1;\n                y = j+1;\n                countStr = 0;\n                countCol = 0;\n                if (j===points[0] && i===points[2] && matrix[points[3]][points[1]]===' ')continue;\n                while (matrix[j+1][x]===' '){\n                    x++;\n                    countStr++;\n                }\n                while (matrix[y][i]!=='+'){\n                    y++;\n                    countCol++\n                }\n                yield `+${'-'.repeat(countStr)}+${`\\n|${' '.repeat(countStr)}|`.repeat(countCol)}\\n+${'-'.repeat(countStr)}+\\n`\n\n            }\n\n        }\n    }\n}\n\n\n\nmodule.exports = {\n    parseBankAccount : parseBankAccount,\n    wrapText: wrapText,\n    PokerRank: PokerRank,\n    getPokerHandRank: getPokerHandRank,\n    getFigureRectangles: getFigureRectangles\n};\n"]}