{"version":3,"sources":["10-katas-1-tasks.js"],"names":[],"mappings":"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","file":"10-katas-1-tasks-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Returns the array of 32 compass points and heading.\n * See details here:\n * https://en.wikipedia.org/wiki/Points_of_the_compass#32_cardinal_points\n *\n * @return {array}\n *\n * Example of return :\n *  [\n *     { abbreviation : 'N',     azimuth : 0.00 ,\n *     { abbreviation : 'NbE',   azimuth : 11.25 },\n *     { abbreviation : 'NNE',   azimuth : 22.50 },\n *       ...\n *     { abbreviation : 'NbW',   azimuth : 348.75 }\n *  ]\n */\nfunction createCompassPoints() {\n    var sides = ['N','E','S','W'];  // use array of cardinal directions only!\n    var result = [];\n    //N E S W\n    for (let i = 0, j = 0; i<360, j< sides.length; i+=90, j++) {\n        result.push({abbreviation: sides[j], azimuth: i})\n    }\n    //NE SE SW NW\n    for (let i = 45, j = 0; i<360; i+=90, j++){\n        if (j%2===0) result.push({abbreviation: sides[j]+sides[j+1], azimuth: i});\n        else if ((j+1) === sides.length) result.push({abbreviation: sides[0]+sides[j], azimuth: i});\n        else result.push({abbreviation: sides[j+1]+sides[j], azimuth: i});\n    }\n    //NbE EbS SbW WbN\n    for (let i = 11.25, j = 0; i<360; i+=90, j++){\n        if ((j+1) === sides.length) result.push({abbreviation: `${sides[j]}b${sides[0]}`, azimuth: i});\n        else result.push({abbreviation: `${sides[j]}b${sides[j+1]}`, azimuth: i});\n    }\n    //NEbE SEbS SWbW NWbN\n    for (let i = 56.25, j = 0; i<360; i+=90, j++){\n        if(j%2===0) result.push({abbreviation: sides[j]+sides[j+1]+'b'+sides[j+1], azimuth: i});\n        else if ((j+1) === sides.length) result.push({abbreviation: sides[0]+sides[j]+'b'+sides[0], azimuth: i});\n        else result.push({abbreviation: sides[j+1]+sides[j]+'b'+sides[j+1], azimuth: i});\n    }\n    //NNE ENE ESE SSE SSW WSW WNW NNW\n    for (let i = 22.5, j = 0; j< sides.length; i+=45, j++){\n        if (j%2===0) {\n            result.push({abbreviation: sides[j]+sides[j]+sides[j+1], azimuth: i});\n            result.push({abbreviation: sides[j+1]+sides[j]+sides[j+1], azimuth: i+=45});\n        }\n        else if ((j+1) === sides.length){\n            result.push({abbreviation: sides[j]+sides[0]+sides[j], azimuth: i});\n            result.push({abbreviation: sides[0]+sides[0]+sides[j], azimuth: i+=45});\n        }\n        else{\n            result.push({abbreviation: sides[j]+sides[j+1]+sides[j], azimuth: i});\n            result.push({abbreviation: sides[j+1]+sides[j+1]+sides[j], azimuth: i+=45})\n        }\n    }\n    //NEbN SEbE SWbS NWbW\n    for (let i = 33.75, j = 0; j< sides.length; i+=90, j++){\n        if (j%2===0) result.push({abbreviation: sides[j]+sides[j+1]+'b'+sides[j], azimuth: i});\n        else if ((j+1) === sides.length) result.push({abbreviation: sides[0]+sides[j]+'b'+sides[j], azimuth: i});\n        else result.push({abbreviation: sides[j+1]+sides[j]+'b'+sides[j], azimuth: i});\n    }\n    //EbN SbE WbS NbW\n    for (let i = 78.75, j = 0; j< sides.length; i+=90, j++){\n        if ((j+1) === sides.length) result.push({abbreviation: sides[0]+'b'+sides[j], azimuth: i});\n        else result.push({abbreviation: sides[j+1]+'b'+sides[j], azimuth: i});\n\n    }\n    return result.sort((a,b)=> (a.azimuth)-(b.azimuth));\n}\n\n\n/**\n * Expand the braces of the specified string.\n * See https://en.wikipedia.org/wiki/Bash_(Unix_shell)#Brace_expansion\n *\n * In the input string, balanced pairs of braces containing comma-separated substrings\n * represent alternations that specify multiple alternatives which are to appear at that position in the output.\n *\n * @param {string} str\n * @return {Iterable.<string>}\n *\n * NOTE: The order of output string does not matter.\n *\n * Example:\n *   '~/{Downloads,Pictures}/*.{jpg,gif,png}'  => '~/Downloads/*.jpg',\n *                                                '~/Downloads/*.gif'\n *                                                '~/Downloads/*.png',\n *                                                '~/Pictures/*.jpg',\n *                                                '~/Pictures/*.gif',\n *                                                '~/Pictures/*.png'\n *\n *   'It{{em,alic}iz,erat}e{d,}, please.'  => 'Itemized, please.',\n *                                            'Itemize, please.',\n *                                            'Italicized, please.',\n *                                            'Italicize, please.',\n *                                            'Iterated, please.',\n *                                            'Iterate, please.'\n *\n *   'thumbnail.{png,jp{e,}g}'  => 'thumbnail.png'\n *                                 'thumbnail.jpeg'\n *                                 'thumbnail.jpg'\n *\n *   'nothing to do' => 'nothing to do'\n */\nfunction* expandBraces(str) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the ZigZag matrix\n *\n * The fundamental idea in the JPEG compression algorithm is to sort coefficient of given image by zigzag path and encode it.\n * In this task you are asked to implement a simple method to create a zigzag square matrix.\n * See details at https://en.wikipedia.org/wiki/JPEG#Entropy_coding\n * and zigzag path here: https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/JPEG_ZigZag.svg/220px-JPEG_ZigZag.svg.png\n *\n * @param {number} n - matrix dimension\n * @return {array}  n x n array of zigzag path\n *\n * @example\n *   1  => [[0]]\n *\n *   2  => [[ 0, 1 ],\n *          [ 2, 3 ]]\n *\n *         [[ 0, 1, 5 ],\n *   3  =>  [ 2, 4, 6 ],\n *          [ 3, 7, 8 ]]\n *\n *         [[ 0, 1, 5, 6 ],\n *   4 =>   [ 2, 4, 7,12 ],\n *          [ 3, 8,11,13 ],\n *          [ 9,10,14,15 ]]\n *\n */\nfunction getZigZagMatrix(n) {\n    var arr = Array.from({ length: n}, (element, index) => {\n        element = new Array(n).fill(0);\n        element[index] = 0;\n        return element;\n    });\n        var i=0;\n        var j=0;\n\n    for(let k=0; k<n*n; k++) {\n        arr[i][j] = k;\n        if((i+j)%2===0) {\n            if(j<n-1) j++;\n            else i += 2;\n            if(i>0) i--;\n        }\n        else {\n            if(i<n-1) i++;\n             else j += 2;\n            if(j>0) j--;\n        }\n    }\n    return arr;\n}\n\n\n/**\n * Returns true if specified subset of dominoes can be placed in a row accroding to the game rules.\n * Dominoes details see at: https://en.wikipedia.org/wiki/Dominoes\n *\n * Each domino tile presented as an array [x,y] of tile value.\n * For example, the subset [1, 1], [2, 2], [1, 2] can be arranged in a row (as [1, 1] followed by [1, 2] followed by [2, 2]),\n * while the subset [1, 1], [0, 3], [1, 4] can not be arranged in one row.\n * NOTE that as in usual dominoes playing any pair [i, j] can also be treated as [j, i].\n *\n * @params {array} dominoes\n * @return {bool}\n *\n * @example\n *\n * [[0,1],  [1,1]] => true\n * [[1,1], [2,2], [1,5], [5,6], [6,3]] => false\n * [[1,3], [2,3], [1,4], [2,4], [1,5], [2,5]]  => true\n * [[0,0], [0,1], [1,1], [0,2], [1,2], [2,2], [0,3], [1,3], [2,3], [3,3]] => false\n *\n */\nfunction canDominoesMakeRow(dominoes) {\n    var result = dominoes.map((element=>{ return element[0]+element[1];})).reduce((pValue, cValue)=> pValue+cValue);\n    return (result%2!==0);\n}\n\n\n/**\n * Returns the string expression of the specified ordered list of integers.\n *\n * A format for expressing an ordered list of integers is to use a comma separated list of either:\n *   - individual integers\n *   - or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, '-'.\n *     (The range includes all integers in the interval including both endpoints)\n *     The range syntax is to be used only for, and for every range that expands to more than two values.\n *\n * @params {array} nums\n * @return {bool}\n *\n * @example\n *\n * [ 0, 1, 2, 3, 4, 5 ]   => '0-5'\n * [ 1, 4, 5 ]            => '1,4,5'\n * [ 0, 1, 2, 5, 7, 8, 9] => '0-2,5,7-9'\n * [ 1, 2, 4, 5]          => '1,2,4,5'\n */\nfunction extractRanges(nums) {\n    var result = '';\n    for (var i = 0; i <nums.length-1; i++){\n        var j = i;\n\n        while ((nums[j] === nums[j + 1] - 1))\n            j++;\n\n        if (nums[i]+1!==nums[i+1] && i!==nums.length-2) result +=`${nums[i]},`;\n        else if (nums[i]+1===nums[i+1]&&nums[i]+2!==nums[i+2])  result +=`${nums[i]},${nums[i + 1]},`;\n        else result += `${nums[i]}-${nums[j]},`;\n        i = j;\n    }\n    return result.slice(0,-1);\n}\n\nmodule.exports = {\n    createCompassPoints : createCompassPoints,\n    expandBraces : expandBraces,\n    getZigZagMatrix : getZigZagMatrix,\n    canDominoesMakeRow : canDominoesMakeRow,\n    extractRanges : extractRanges\n};\n"]}