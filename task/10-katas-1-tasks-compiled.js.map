{"version":3,"sources":["10-katas-1-tasks.js"],"names":[],"mappings":"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","file":"10-katas-1-tasks-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Returns the array of 32 compass points and heading.\n * See details here:\n * https://en.wikipedia.org/wiki/Points_of_the_compass#32_cardinal_points\n *\n * @return {array}\n *\n * Example of return :\n *  [\n *     { abbreviation : 'N',     azimuth : 0.00 ,\n *     { abbreviation : 'NbE',   azimuth : 11.25 },\n *     { abbreviation : 'NNE',   azimuth : 22.50 },\n *       ...\n *     { abbreviation : 'NbW',   azimuth : 348.75 }\n *  ]\n */\nfunction createCompassPoints() {\n    var sides = ['N', 'E', 'S', 'W'];  // use array of cardinal directions only!\n\n    let result = [];\n    var dev1,       dev,\n    azim=360,       az,\n    deg,            count;\n\n    for(var i=0; i<32; i++) {\n\n        az = i*azim/32;\n        deg = az;\n\n        count=0;\n        while(deg>=90) {\n            deg = deg - 90;\n            count++;\n        }\n\n        if (count>2) dev = sides[0];\n        else dev = sides[count+1];\n\n        if (sides[count]===sides[0] || sides[count]===sides[2]) dev1 = sides[count]+dev;\n        else dev1 = dev+sides[count];\n\n        if(deg===0)     result.push({abbreviation : sides[count],             azimuth : az });\n        if(deg===11.25) result.push({abbreviation : sides[count]+'b'+dev,     azimuth : az });\n        if(deg===22.5)  result.push({abbreviation : sides[count]+dev1,        azimuth : az });\n        if(deg===33.75) result.push({abbreviation : dev1+'b'+sides[count],    azimuth : az });\n        if(deg===45)    result.push({abbreviation : dev1,                     azimuth : az });\n        if(deg===56.25) result.push({abbreviation : dev1+'b'+dev,             azimuth : az });\n        if(deg===67.5)  result.push({abbreviation : dev+dev1,                 azimuth : az });\n        if(deg===78.75) result.push({abbreviation : dev+'b'+sides[count],     azimuth : az });\n    }\n    return result;\n}\n\n\n/**\n * Expand the braces of the specified string.\n * See https://en.wikipedia.org/wiki/Bash_(Unix_shell)#Brace_expansion\n *\n * In the input string, balanced pairs of braces containing comma-separated substrings\n * represent alternations that specify multiple alternatives which are to appear at that position in the output.\n *\n * @param {string} str\n * @return {Iterable.<string>}\n *\n * NOTE: The order of output string does not matter.\n *\n * Example:\n *   '~/{Downloads,Pictures}/*.{jpg,gif,png}'  => '~/Downloads/*.jpg',\n *                                                '~/Downloads/*.gif'\n *                                                '~/Downloads/*.png',\n *                                                '~/Pictures/*.jpg',\n *                                                '~/Pictures/*.gif',\n *                                                '~/Pictures/*.png'\n *\n *   'It{{em,alic}iz,erat}e{d,}, please.'  => 'Itemized, please.',\n *                                            'Itemize, please.',\n *                                            'Italicized, please.',\n *                                            'Italicize, please.',\n *                                            'Iterated, please.',\n *                                            'Iterate, please.'\n *\n *   'thumbnail.{png,jp{e,}g}'  => 'thumbnail.png'\n *                                 'thumbnail.jpeg'\n *                                 'thumbnail.jpg'\n *\n *   'nothing to do' => 'nothing to do'\n */\nfunction* expandBraces(str) {\n    throw new Error('Not implemented');\n}\n\n\n/**\n * Returns the ZigZag matrix\n *\n * The fundamental idea in the JPEG compression algorithm is to sort coefficient of given image by zigzag path and encode it.\n * In this task you are asked to implement a simple method to create a zigzag square matrix.\n * See details at https://en.wikipedia.org/wiki/JPEG#Entropy_coding\n * and zigzag path here: https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/JPEG_ZigZag.svg/220px-JPEG_ZigZag.svg.png\n *\n * @param {number} n - matrix dimension\n * @return {array}  n x n array of zigzag path\n *\n * @example\n *   1  => [[0]]\n *\n *   2  => [[ 0, 1 ],\n *          [ 2, 3 ]]\n *\n *         [[ 0, 1, 5 ],\n *   3  =>  [ 2, 4, 6 ],\n *          [ 3, 7, 8 ]]\n *\n *         [[ 0, 1, 5, 6 ],\n *   4 =>   [ 2, 4, 7,12 ],\n *          [ 3, 8,11,13 ],\n *          [ 9,10,14,15 ]]\n *\n */\nfunction getZigZagMatrix(n) {\n    var arr = Array.from({ length: n}, (element, index) => {\n        element = new Array(n).fill(0);\n        element[index] = 0;\n        return element;\n    });\n    function overallCode(v1, v2) {\n        if (v1 < n) v1 ++;\n        else v2 += 2;\n        if (v2 > 1) v2 --;\n    }\n    var i=1, j=1;\n    for (var k = 0; k< n*n; k++) {\n        arr[i-1][j-1] = k;\n        if ((i + j) % 2 == 0) {\n            if (j < n) j ++;\n            else i += 2;\n            if (i > 1) i --;\n        } else {\n            if (i < n) i ++;\n            else j += 2;\n            if (j > 1) j --;\n        }\n    }\n    return arr;\n}\n\n\n/**\n * Returns true if specified subset of dominoes can be placed in a row accroding to the game rules.\n * Dominoes details see at: https://en.wikipedia.org/wiki/Dominoes\n *\n * Each domino tile presented as an array [x,y] of tile value.\n * For example, the subset [1, 1], [2, 2], [1, 2] can be arranged in a row (as [1, 1] followed by [1, 2] followed by [2, 2]),\n * while the subset [1, 1], [0, 3], [1, 4] can not be arranged in one row.\n * NOTE that as in usual dominoes playing any pair [i, j] can also be treated as [j, i].\n *\n * @params {array} dominoes\n * @return {bool}\n *\n * @example\n *\n * [[0,1],  [1,1]] => true\n * [[1,1], [2,2], [1,5], [5,6], [6,3]] => false\n * [[1,3], [2,3], [1,4], [2,4], [1,5], [2,5]]  => true\n * [[0,0], [0,1], [1,1], [0,2], [1,2], [2,2], [0,3], [1,3], [2,3], [3,3]] => false\n *\n */\nfunction canDominoesMakeRow(dominoes) {\n    var result = dominoes.map((element=>{ return element[0]+element[1];})).reduce((pValue, cValue)=> pValue+cValue);\n    return (result%2!==0);\n}\n\n\n/**\n * Returns the string expression of the specified ordered list of integers.\n *\n * A format for expressing an ordered list of integers is to use a comma separated list of either:\n *   - individual integers\n *   - or a range of integers denoted by the starting integer separated from the end integer in the range by a dash, '-'.\n *     (The range includes all integers in the interval including both endpoints)\n *     The range syntax is to be used only for, and for every range that expands to more than two values.\n *\n * @params {array} nums\n * @return {bool}\n *\n * @example\n *\n * [ 0, 1, 2, 3, 4, 5 ]   => '0-5'\n * [ 1, 4, 5 ]            => '1,4,5'\n * [ 0, 1, 2, 5, 7, 8, 9] => '0-2,5,7-9'\n * [ 1, 2, 4, 5]          => '1,2,4,5'\n */\nfunction extractRanges(nums) {\n    var result = '';\n    for (var i = 0; i <nums.length-1; i++){\n        var j = i;\n\n        while ((nums[j] === nums[j + 1] - 1))\n            j++;\n\n        if (nums[i]+1!==nums[i+1] && i!==nums.length-2) result +=`${nums[i]},`;\n        else if (nums[i]+1===nums[i+1] && nums[i]+2!==nums[i+2]) result +=`${nums[i]},${nums[i + 1]},`;\n        else result += `${nums[i]}-${nums[j]},`;\n        i = j;\n    }\n    return result.slice(0,-1);\n}\n\nmodule.exports = {\n    createCompassPoints : createCompassPoints,\n    expandBraces : expandBraces,\n    getZigZagMatrix : getZigZagMatrix,\n    canDominoesMakeRow : canDominoesMakeRow,\n    extractRanges : extractRanges\n};\n"]}