{"version":3,"sources":["02-numbers-tasks.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,MAAjC,EAAyC;AACrC,WAAO,QAAM,MAAN,CAD8B;CAAzC;;;;;;;;;;;;;AAgBA,SAAS,qBAAT,CAA+B,MAA/B,EAAuC;AACnC,WAAO,IAAE,KAAK,EAAL,GAAQ,MAAV,CAD4B;CAAvC;;;;;;;;;;;;;;AAgBA,SAAS,UAAT,CAAoB,MAApB,EAA4B,MAA5B,EAAoC;AAChC,WAAO,SAAO,CAAP,GAAW,SAAO,CAAP,CADc;CAApC;;;;;;;;;;;;;;;;;AAmBA,SAAS,wBAAT,CAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,EAA9C,EAAkD;AAC9C,WAAO,KAAK,KAAL,CAAY,KAAG,EAAH,EAAQ,KAAG,EAAH,CAA3B,CAD8C;CAAlD;;;;;;;;;;;;;;AAgBA,SAAS,qBAAT,CAA+B,CAA/B,EAAkC,CAAlC,EAAqC;AACjC,WAAO,CAAC,CAAD,GAAG,CAAH,CAD0B;CAArC;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,sBAAT,CAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD;AAC5C,WAAO,KAAK,IAAL,CAAW,CAAC,KAAG,EAAH,GAAM,KAAG,EAAH,CAAP,IAAe,KAAK,KAAL,CAAW,EAAX,EAAe,EAAf,IAAmB,KAAK,KAAL,CAAW,EAAX,EAAe,EAAf,CAAnB,CAAf,CAAlB,CAD4C;CAAhD;;;;;;;;;;;;;;AAgBA,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AACzB,WAAO,QAAQ,EAAR,CADkB;CAA7B;;;;;;;;;;;;;AAgBA,SAAS,qBAAT,CAA+B,KAA/B,EAAsC;AAClC,WAAO,OAAO,KAAP,CAAP,CADkC;CAAtC;;;;;;;;;;;;;;;AAiBA,SAAS,yBAAT,CAAmC,CAAnC,EAAqC,CAArC,EAAuC,CAAvC,EAA0C;AACtC,WAAO,KAAK,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAP,CADsC;CAA1C;;;;;;;;;;;;;;;;;;;AAqBA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AACjC,UAAM,aAAc,KAAK,GAAL,CAAS,EAAT,EAAa,GAAb,CAAd,CAD2B;AAEjC,WAAQ,KAAK,KAAL,CAAW,MAAM,UAAN,CAAX,GAA8B,UAA9B,CAFyB;CAArC;;;;;;;;;;;;;;;;;;;AAsBA,SAAS,OAAT,CAAiB,CAAjB,EAAoB;AAChB,SAAI,IAAI,IAAE,CAAF,EAAK,KAAG,KAAK,IAAL,CAAU,CAAV,CAAH,EAAiB,GAA9B,EAAkC;AAC9B,YAAG,IAAE,CAAF,IAAK,CAAL,EAAQ,OAAO,KAAP,CAAX;KADJ;AAGA,WAAO,IAAP,CAJgB;CAApB;;;;;;;;;;;;;;;;;AAsBA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B;AAC1B,WAAO,CAAC,KAAD,IAAU,GAAV,CADmB;CAA9B;;AAIA,OAAO,OAAP,GAAiB;AACb,sBAAkB,gBAAlB;AACA,2BAAuB,qBAAvB;AACA,gBAAY,UAAZ;AACA,8BAA0B,wBAA1B;AACA,2BAAuB,qBAAvB;AACA,4BAAwB,sBAAxB;AACA,kBAAc,YAAd;AACA,2BAAuB,qBAAvB;AACA,+BAA2B,yBAA3B;AACA,uBAAmB,iBAAnB;AACA,aAAS,OAAT;AACA,cAAU,QAAV;CAZJ","file":"02-numbers-tasks-compiled.js","sourcesContent":["'use strict';\n\n/********************************************************************************************\n *                                                                                          *\n * Plese read the following tutorial before implementing tasks:                             *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates          *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number  *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math    *\n *                                                                                          *\n ********************************************************************************************/\n\n\n/**\n * Returns an area of a rectangle given by width and heigth.\n *\n * @param {numder} width\n * @param {number} height\n * @return {number}\n *\n * @example:\n *   5, 10 => 50\n *   5, 5  => 25\n */\nfunction getRectangleArea(width, height) {\n    return width*height;\n}\n\n\n/**\n * Returns a circumference of circle given by radius.\n *\n * @param {number} radius\n * @return {number}\n *\n * @example:\n *   5    => 31.41592653589793\n *   3.14 => 19.729201864543903\n *   0    => 0\n */\nfunction getCicleCircumference(radius) {\n    return 2*Math.PI*radius;\n}\n\n/**\n * Returns an average of two given numbers.\n *\n * @param {numder} value1\n * @param {number} value2\n * @return {number}\n *\n * @example:\n *   5, 5  => 5\n *  10, 0  => 5\n *  -3, 3  => 0\n */\nfunction getAverage(value1, value2) {\n    return value1/2 + value2/2;\n}\n\n/**\n * Returns a distance beetween two points by cartesian coordinates.\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n *\n * @return {number}\n *\n * @example:\n *   (0,0) (0,1)    => 1\n *   (0,0) (1,0)    => 1\n *   (-5,0) (10,-10) => 18.027756377319946\n */\nfunction getDistanceBetweenPoints(x1, y1, x2, y2) {\n    return Math.hypot((x2-x1),(y2-y1));\n}\n\n/**\n * Returns a root of linear equation a*x + b = 0 given by coefficients a and b.\n *\n * @param {number} a\n * @param {number} b\n * @return {number}\n *\n * @example:\n *   5*x - 10 = 0    => 2\n *   x + 8 = 0       => -8\n *   5*x = 0         => 0\n */\nfunction getLinearEquationRoot(a, b) {\n    return -b/a;\n}\n\n\n/**\n * Returns an angle (in radians) between two vectors given by xi and yi, coordinates in Cartesian plane\n * See details https://en.wikipedia.org/wiki/Euclidean_vector#Representations\n *\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {number}\n *\n * @example:\n *   (1,0) (0,1)     => π/2\n *   (0,1) (0,-1)    => π\n *   (0,-1) (1,0)    => π/2\n *   (0,1) (0,1)     => 0\n *   (0,1) (1,2)     => 0\n */\nfunction getAngleBetweenVectors(x1, y1, x2, y2) {\n    return Math.acos(((x1*x2+y1*y2)/(Math.hypot(x1, y1)*Math.hypot(x2, y2))));\n}\n\n/**\n * Returns a last digit of a integer number.\n *\n * @param {number} value\n * @return {number}\n *\n * @example:\n *   100     => 0\n *    37     => 7\n *     5     => 5\n *     0     => 0\n */\nfunction getLastDigit(value) {\n    return value % 10;\n}\n\n\n/**\n * Returns a number by given string representation.\n *\n * @param {string} value\n * @return {number}\n *\n * @example:\n *    '100'     => 100\n *     '37'     => 37\n * '-525.5'     => -525.5\n */\nfunction parseNumberFromString(value) {\n    return Number(value);\n}\n\n/**\n * Returns a diagonal length of the rectangular parallelepiped given by its sides a,b,c.\n *\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n *\n * @example:\n *   1,1,1   => 1.7320508075688772\n *   3,3,3   => 5.196152422706632\n *   1,2,3   => 3.741657386773941\n */\nfunction getParallelipidedDiagonal(a,b,c) {\n    return Math.hypot(a, b, c);\n}\n\n/**\n * Returns the number rounded to specified power of 10.\n *\n * @param {number} num\n * @param {number} pow\n * @return {number}\n *  \n * @example:\n *   1234, 0  => 1234\n *   1234, 1  => 1230\n *   1234, 2  => 1200\n *   1234, 3  => 1000\n *   1678, 0  => 1678\n *   1678, 1  => 1680\n *   1678, 2  => 1700\n *   1678, 3  => 2000\n */\nfunction roundToPowerOfTen(num, pow) {\n    const powerOfTen =  Math.pow(10, pow);\n    return (Math.round(num / powerOfTen) *powerOfTen);\n}\n\n/**\n * Returns true is the number is prime; otherwise false.\n * See: https://en.wikipedia.org/wiki/Primality_test\n *\n * @param {number} n\n * @return {bool}\n * \n * @example:\n *   4 => false\n *   5 => true\n *   6 => false\n *   7 => true\n *   11 => true\n *   12 => false\n *   16 => false\n *   17 => true\n */\nfunction isPrime(n) {\n    for(let i=2; i<=Math.sqrt(n); i++){\n        if(n%i==0) return false;\n    }\n    return true;\n}\n\n/**\n * Tries to convert value to number and returns it if conversion was successfull;\n * otherwise returns default value passed as a second argument.\n *\n * @param {any} value\n * @param {any} def\n * @return {number}\n *\n * @example\n *   toNumber(null, 0) => 0\n *   toNumber('test', 0) => 0\n *   toNumber('1', 0) => 1\n *   toNumber(42, 0) => 42\n *   toNumber(new Number(42), 0) => 42\n */\nfunction toNumber(value, def) {\n    return +value || def;\n}\n\nmodule.exports = {\n    getRectangleArea: getRectangleArea,\n    getCicleCircumference: getCicleCircumference,\n    getAverage: getAverage,\n    getDistanceBetweenPoints: getDistanceBetweenPoints,\n    getLinearEquationRoot: getLinearEquationRoot,\n    getAngleBetweenVectors: getAngleBetweenVectors,\n    getLastDigit: getLastDigit,\n    parseNumberFromString: parseNumberFromString,\n    getParallelipidedDiagonal: getParallelipidedDiagonal,\n    roundToPowerOfTen: roundToPowerOfTen,\n    isPrime: isPrime,\n    toNumber: toNumber\n};\n"]}