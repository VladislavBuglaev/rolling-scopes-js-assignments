{"version":3,"sources":["03-date-tasks.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAS,oBAAT,CAA8B,KAA9B,EAAqC;AACjC,WAAO,IAAI,IAAJ,CAAS,KAAT,CAAP,CADiC;CAArC;;;;;;;;;;;;;AAeA,SAAS,oBAAT,CAA8B,KAA9B,EAAqC;AACjC,WAAO,IAAI,IAAJ,CAAS,KAAT,CAAP,CADiC;CAArC;;;;;;;;;;;;;;;;AAmBA,SAAS,UAAT,CAAoB,IAApB,EAA0B;AACtB,QAAI,MAAM,KAAK,WAAL,EAAN,CADkB;AAEtB,WAAO,GAAC,GAAI,CAAJ,KAAQ,CAAR,IACA,MAAI,GAAJ,KAAU,CAAV,IACA,MAAI,GAAJ,KAAU,CAAV,CAJc;CAA1B;;;;;;;;;;;;;;;;;AAuBA,SAAS,gBAAT,CAA0B,SAA1B,EAAqC,OAArC,EAA8C;AAC1C,WAAO,IAAI,IAAJ,CAAS,UAAU,SAAV,CAAT,CAA8B,WAA9B,GAA4C,KAA5C,CAAkD,EAAlD,EAAqD,CAAC,CAAD,CAA5D,CAD0C;CAA9C;;;;;;;;;;;;;;;;AAoBA,SAAS,sBAAT,CAAgC,IAAhC,EAAsC;AAC9B,UAAM,OAAO,KAAK,WAAL,KAAqB,EAArB,CADiB;AAE9B,UAAM,UAAU,KAAK,aAAL,EAAV,CAFwB;AAGlC,QAAI,SAAS,KAAK,GAAL,CAAS,CAAC,OAAO,UAAQ,EAAR,CAAR,GAAoB,EAApB,GAAuB,IAAE,OAAF,CAAzC,CAH8B;;AAKlC,QAAG,QAAQ,EAAR,IAAc,WAAS,CAAT,IAAe,QAAQ,CAAR,IAAa,WAAS,CAAT,EAAY,OAAO,KAAK,EAAL,GAAQ,CAAR,CAAhE;AACA,QAAI,QAAQ,EAAR,EAAY,OAAO,KAAK,EAAL,CAAvB;AACA,QAAG,UAAQ,GAAR,EAAa,OAAO,MAAC,GAAO,KAAK,EAAL,GAAS,GAAjB,CAAvB;AACA,QAAG,SAAS,GAAT,IAAgB,SAAS,GAAT,EAAc,OAAO,CAAE,MAAI,MAAJ,CAAD,GAAa,KAAK,EAAL,GAAS,GAAvB,CAAxC;CARJ;;AAYA,OAAO,OAAP,GAAiB;AACb,0BAAsB,oBAAtB;AACA,0BAAsB,oBAAtB;AACA,gBAAY,UAAZ;AACA,sBAAkB,gBAAlB;AACA,4BAAwB,sBAAxB;CALJ","file":"03-date-tasks-compiled.js","sourcesContent":["'use strict';\n\n/********************************************************************************************\n *                                                                                          *\n * Plese read the following tutorial before implementing tasks:                             *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#Date_object\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date    *\n *                                                                                          *\n ********************************************************************************************/\n\n\n/**\n * Parses a rfc2822 string date representation into date value\n * For rfc2822 date specification refer to : http://tools.ietf.org/html/rfc2822#page-14\n *\n * @param {string} value\n * @return {date}\n *\n * @example:\n *    'December 17, 1995 03:24:00'    => Date()\n *    'Tue, 26 Jan 2016 13:48:02 GMT' => Date()\n *    'Sun, 17 May 1998 03:00:00 GMT+01' => Date()\n */\nfunction parseDataFromRfc2822(value) {\n    return new Date(value);\n}\n\n/**\n * Parses an ISO 8601 string date representation into date value\n * For ISO 8601 date specification refer to : https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param {string} value\n * @return {date}\n *\n * @example :\n *    '2016-01-19T16:07:37+00:00'    => Date()\n *    '2016-01-19T08:07:37Z' => Date()\n */\nfunction parseDataFromIso8601(value) {\n    return new Date(value);\n}\n\n\n/**\n * Returns true if specified date is leap year and false otherwise\n * Please find algorithm here: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n *\n * @param {date} date\n * @return {bool}\n *\n * @example :\n *    Date(1900,1,1)    => false\n *    Date(2000,1,1)    => true\n *    Date(2001,1,1)    => false\n *    Date(2012,1,1)    => true\n *    Date(2015,1,1)    => false\n */\nfunction isLeapYear(date) {\n    var dat = date.getFullYear();\n    return (dat%4===0)\n        && (dat%100!==0)\n        || (dat%400===0);\n}\n\n\n/**\n * Returns the string represention of the timespan between two dates.\n * The format of output string is \"HH:mm:ss.sss\"\n *\n * @param {date} startDate\n * @param {date} endDate\n * @return {string}\n *\n * @example:\n *    Date(2000,1,1,10,0,0),  Date(2000,1,1,11,0,0)   => \"01:00:00.000\"\n *    Date(2000,1,1,10,0,0),  Date(2000,1,1,10,30,0)       => \"00:30:00.000\"\n *    Date(2000,1,1,10,0,0),  Date(2000,1,1,10,0,20)        => \"00:00:20.000\"\n *    Date(2000,1,1,10,0,0),  Date(2000,1,1,10,0,0,250)     => \"00:00:00.250\"\n *    Date(2000,1,1,10,0,0),  Date(2000,1,1,15,20,10,453)   => \"05:20:10.453\"\n */\nfunction timeSpanToString(startDate, endDate) {\n    return new Date(endDate - startDate).toISOString().slice(11,-1);\n}\n\n\n\n    /**\n * Returns the angle (in radians) between the hands of an analog clock for the specified Greenwich time.\n * If you have problem with solution please read: https://en.wikipedia.org/wiki/Clock_angle_problem\n * \n * @param {date} date\n * @return {number}\n *\n * @example:\n *    Date.UTC(2016,2,5, 0, 0) => 0\n *    Date.UTC(2016,3,5, 3, 0) => Math.PI/2\n *    Date.UTC(2016,3,5,18, 0) => Math.PI\n *    Date.UTC(2016,3,5,21, 0) => Math.PI/2\n */\n    //Нужен рефакторинг\nfunction angleBetweenClockHands(date) {\n        const hour = date.getUTCHours() % 12;\n        const minutes = date.getUTCMinutes();\n    var result = Math.abs(((hour)+minutes/60)*30-6*minutes)\n\n    if(hour == 15 && minutes==0  || hour == 9 && minutes==0) return Math.PI/2;\n    if (hour == 18) return Math.PI;\n    if(result<=180) return (result*Math.PI)/180;\n    if(result > 180 && result < 360) return ((360-result)*Math.PI)/180;\n}\n\n\nmodule.exports = {\n    parseDataFromRfc2822: parseDataFromRfc2822,\n    parseDataFromIso8601: parseDataFromIso8601,\n    isLeapYear: isLeapYear,\n    timeSpanToString: timeSpanToString,\n    angleBetweenClockHands: angleBetweenClockHands\n};\n"]}