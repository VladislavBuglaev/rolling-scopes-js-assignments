{"version":3,"sources":["04-arrays-tasks.js"],"names":[],"mappings":"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","file":"04-arrays-tasks-compiled.js","sourcesContent":["'use strict';\n\n/*********************************************************************************************\n *                                                                                           *\n * Plese read the following tutorial before implementing tasks:                              *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array    *\n *                                                                                           *\n * NOTE : Please do not use loops! All tasks can be implmeneted using standard Array methods *\n *                                                                                           *\n *********************************************************************************************/\n\n \n/**\n * Returns an index of the specified element in array or -1 if element is not found\n * \n * @param {array} arr\n * @param {any} value\n * @return {number}\n * \n * @example\n *    ['Ace', 10, true], 10    => 1 \n *    ['Array', 'Number', 'string'], 'Date'    => -1 \n *    [0, 1, 2, 3, 4, 5], 5    => 5\n */\nfunction findElement(arr, value) {\n   return arr.indexOf(value)\n}\n\n/**\n * Generates an array of odd numbers of the specified length\n * \n * @param {number} len\n * @return {array}\n * \n * @example\n *    1 => [ 1 ] \n *    2 => [ 1, 3 ] \n *    5 => [ 1, 3, 5, 7, 9 ]\n */\nfunction generateOdds(len) {\n   return Array.from({ length: len}, (v, k) => k*2+1);\n}\n\n\n/**\n * Returns the doubled array - elements of the specified array are repeated twice using original order\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    ['Ace', 10, true]  => ['Ace', 10, true,   'Ace', 10, true]  \n *    [0, 1, 2, 3, 4, 5] => [0, 1, 2, 3, 4, 5,   0, 1, 2, 3, 4, 5]\n *    [] => [] \n */\nfunction doubleArray(arr) {\n   return arr.concat(arr);\n}\n\n\n/**\n * Returns an array of positive numbers from the specified array in original order\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [ 0, 1, 2, 3, 4, 5 ] => [ 1, 2, 3, 4, 5 ]\n *    [-1, 2, -5, -4, 0] => [ 2 ]\n *    [] => [] \n */\nfunction getArrayOfPositives(arr) {\n   return arr.filter(number => number > 0);\n}\n\n/**\n * Returns the array with strings only in the specified array (in original order)\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [ 0, 1, 'cat', 3, true, 'dog' ] => [ 'cat', 'dog' ]\n *    [ 1, 2, 3, 4, 5 ] => []\n *    [ 'cat, 'dog', 'raccon' ] => [ 'cat', 'dog', 'racoon' ]\n */\nfunction getArrayOfStrings(arr) {\n   return arr.filter(element => typeof element === 'string');\n}\n\n/**\n * Removes falsy values from the specified array\n * Falsy values: false, null, 0, \"\", undefined, and NaN.\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#Description)\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [ 0, false, 'cat', NaN, true, '' ] => [ 'cat', true ]\n *    [ 1, 2, 3, 4, 5, 'false' ]         => [ 1, 2, 3, 4, 5, 'false' ]\n *    [ false, 0, NaN, '', undefined ]   => [ ]\n */\nfunction removeFalsyValues(arr) {\n   return arr.filter(element=> element);\n}\n\n/**\n * Returns the array of useprcase strings from the specified array\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [ 'permanent-internship', 'glutinous-shriek', 'multiplicative-elevation' ] => [ 'PERMANENT-INTERNSHIP', 'GLUTINOUS-SHRIEK', 'MULTIPLICATIVE-ELEVATION' ]\n *    [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]  => [ 'A', 'B', 'C', 'D', 'E', 'F', 'G' ]\n */\nfunction getUpperCaseStrings(arr) {\n   return arr.map(element=>element.toUpperCase());\n}\n\n\n/**\n * Returns the array of string lengths from the specified string array.\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [ '', 'a', 'bc', 'def', 'ghij' ]  => [ 0, 1, 2, 3, 4 ]\n *    [ 'angular', 'react', 'ember' ] => [ 7, 5, 5 ]\n */\nfunction getStringsLength(arr) {\n   return arr.map(element=>element.length);\n}\n\n/**\n * Inserts the item into specified array at specified index\n * \n * @param {array} arr\n * @param {any} item\n * @param {number} index \n * \n * @example\n *    [ 1, 3, 4, 5 ], 2, 1  => [ 1, 2, 3, 4, 5 ]\n *    [ 1, 'b', 'c'], 0, 'x'  => [ 'x', 1, 'b', 'c' ]\n */\nfunction insertItem(arr, item, index) {\n   return arr.splice(index, 0, item);\n}\n\n/**\n * Returns the n first items of the specified array\n * \n * @param {array} arr\n * @param {number} n \n * \n * @example\n *    [ 1, 3, 4, 5 ], 2  => [ 1, 2 ]\n *    [ 'a', 'b', 'c', 'd'], 3  => [ 'a', 'b', 'c' ]\n */\nfunction getHead(arr, n) {\n   return arr.slice(0, n);\n}\n\n\n/**\n * Returns the n last items of the specified array\n * \n * @param {array} arr\n * @param {number} n \n * \n * @example\n *    [ 1, 3, 4, 5 ], 2  => [ 4, 5 ]\n *    [ 'a', 'b', 'c', 'd'], 3  => [ 'b', 'c', 'd' ]\n */\nfunction getTail(arr, n) {\n   return arr.splice(-n);\n}\n\n\n/**\n * Returns CSV represebtation of two-dimentional numeric array.\n * https://en.wikipedia.org/wiki/Comma-separated_values\n * \n * @param {array} arr\n * @return {string}\n * \n * @example\n *    [\n *       [  0, 1, 2, 3, 4 ],\n *       [ 10,11,12,13,14 ],\n *       [ 20,21,22,23,24 ],\n *       [ 30,31,32,33,34 ]\n *    ] \n *           => \n *     '0,1,2,3,4\\n'\n *    +'10,11,12,13,14\\n'\n *    +'20,21,22,23,24\\n'\n *    +'30,31,32,33,34'\n */\nfunction toCsvText(arr) {\n   return arr.join(`\\n`);\n}\n\n/**\n * Transforms the numeric array into the according array of squares:\n *   f(x) = x * x\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *   [ 0, 1, 2, 3, 4, 5 ] => [ 0, 1, 4, 9, 16, 25 ]\n *   [ 10, 100, -1 ]      => [ 100, 10000, 1 ]\n */\nfunction toArrayOfSquares(arr) {\n   return arr.map(element=>element*element);\n}\n\n\n/**\n * Transforms the numeric array to the according moving sum array:\n *     f[n] = x[0] + x[1] + x[2] +...+ x[n] \n *  or f[n] = f[n-1] + x[n]\n * \n * @param {array} arr\n * @return {array}\n * \n * Example :\n *   [ 1, 1, 1, 1, 1 ]        => [ 1, 2, 3, 4, 5 ]\n *   [ 10, -10, 10, -10, 10 ] => [ 10, 0, 10, 0, 10 ]\n *   [ 0, 0, 0, 0, 0]         => [ 0, 0, 0, 0, 0] \n *   [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] => [ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55 ]\n */\nfunction getMovingSum(arr) {\n   var sum =0;\n   return arr.map(element=>sum+=element)\n}\n\n/**\n * Returns every second item from the specified array:\n * \n * @param {array} arr\n * @return {array}\n * \n * Example :\n * [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] => [ 2, 4, 6, 8, 10 ]\n * [ 'a', 'b', 'c' , null ]  => [ \"b\", null ]\n * [ \"a\" ] => []\n */\nfunction getSecondItems(arr) {\n   return arr.filter((element, index) => index % 2 == 1 );\n}\n\n\n/**\n * Propagates every item in sequence its position times\n * Returns an array that consists of: one first item, two second items, tree third items etc. \n * \n * @param {array} arr \n * @return {array}\n * \n * @example :\n *  [] => []\n *  [ 1 ] => [ 1 ]\n *  [ 'a', 'b' ] => [ 'a', 'b','b' ]\n *  [ 'a', 'b', 'c', null ] => [ 'a', 'b','b', 'c','c','c',  null,null,null,null ]\n *  [ 1,2,3,4,5 ] => [ 1, 2,2, 3,3,3, 4,4,4,4, 5,5,5,5,5 ]\n */\nfunction propagateItemsByPositionIndex(arr) {\n   return arr.map((element, index)=>{\n     var array = new Array(index+1);\n     return array.fill(element)\n   }).reduce((element, index)=> element.concat(index), []);\n}\n\n\n/** \n * Returns the 3 largest numbers from the specified array\n * \n * @param {array} arr\n * @return {array}\n *\n * @example\n *   [] => []\n *   [ 1, 2 ] => [ 2, 1 ]\n *   [ 1, 2, 3 ] => [ 3, 2, 1 ]\n *   [ 1,2,3,4,5,6,7,8,9,10 ] => [ 10, 9, 8 ]\n *   [ 10, 10, 10, 10 ] => [ 10, 10, 10 ]\n */\nfunction get3TopItems(arr) {\n   return arr.sort((a, b)=>{ return b - a}).splice(0, 3);\n}\n \n \n/**  \n * Returns the number of positive numbers from specified array\n * \n * @param {array} arr\n * @return {number}\n * \n * @example\n *   [ ]          => 0\n *   [ -1, 0, 1 ] => 1\n *   [ 1, 2, 3]   => 3\n *   [ null, 1, 'elephant' ] => 1\n */\nfunction getPositivesCount(arr) {\n   return arr.reduce((element1, element2)=> element1+(element2>0), 0);\n}\n \n/** \n * Sorts digit names\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *   [] => []\n *   [ 'nine','one' ]                 => [ 'one', 'nine' ]\n *   [ 'one','two','three' ]          => [ 'one','two', 'three' ]\n *   [ 'nine','eight','nine','eight'] => [ 'eight','eight','nine','nine']\n *   [ 'one','one','one','zero' ]     => [ 'zero','one','one','one' ]\n */\nfunction sortDigitNamesByNumericOrder(arr) {\n   var element = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n   return arr.sort((a, b) => {\n     return element.indexOf(a) - element.indexOf(b);\n   });\n\n}\n\n/** \n * Returns the sum of all items in the specified array of numbers\n * \n * @param {array} arr\n * @return {number}\n * \n * @example\n *   [] => 0\n *   [ 1, 2, 3 ]           => 6\n *   [ -1, 1, -1, 1 ]      => 0\n *   [ 1, 10, 100, 1000 ]  => 1111\n */\nfunction getItemsSum(arr) {\n   return arr.reduce((sum, current)=>sum + current,0);\n}\n \n/** \n * Returns the number of all falsy value in the specified array\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *  [] => 0\n *  [ 1, '', 3 ] => 1\n *  [ -1, 'false', null, 0 ] => 2\n *  [ null, undefined, NaN, false, 0, '' ]  => 6\n */\nfunction getFalsyValuesCount(arr) {\n   return arr.reduce((element1, element2)=>element1+(new Boolean(element2) == false),0);\n}\n\n/**\n * Returns a number of all occurences of the specified item in an array  \n * \n * @param {array} arr\n * @param {any} item \n * @return {number}\n * \n * @example\n *    [ 0, 0, 1, 1, 1, 2 ], 1 => 3\n *    [ 1, 2, 3, 4, 5 ], 0 => 0\n *    [ 'a','b','c','c' ], 'c'=> 2\n *    [ null, undefined, null ], null => 2 \n *    [ true, 0, 1, 'true' ], true => 1\n */\nfunction findAllOccurences(arr, item) {\n   return arr.reduce((element1, element2)=>element1+(element2===item),0);\n}\n\n/**\n * Concatenates all elements from specified array into single string with ',' delimeter  \n * \n * @param {array} arr \n * @return {string}\n * \n * @example\n *    [0, false, 'cat', NaN, true, '']  => '0,false,cat,NaN,true,'\n *    [1, 2, 3, 4, 5]                   => '1,2,3,4,5'\n *    ['rock', 'paper', 'scissors']     => 'rock,paper,scissors'\n */\nfunction toStringList(arr) {\n   return arr.toString();\n}\n\n\n/**\n * Sorts the specified array by country name first and city name (if countries are equal) in ascending order.\n * \n * @param {array} arr\n * @return {array}\n * \n * @example\n *    [\n *      { country: 'Russia',  city: 'Moscow' },\n *      { country: 'Belarus', city: 'Minsk' },\n *      { country: 'Poland',  city: 'Warsaw' },\n *      { country: 'Russia',  city: 'Saint Petersburg' },\n *      { country: 'Poland',  city: 'Krakow' },\n *      { country: 'Belarus', city: 'Brest' }\n *    ]  \n *                      =>\n *    [\n *      { country: 'Belarus', city: 'Brest' },\n *      { country: 'Belarus', city: 'Minsk' },\n *      { country: 'Poland',  city: 'Krakow' },\n *      { country: 'Poland',  city: 'Warsaw' },\n *      { country: 'Russia',  city: 'Moscow' },\n *      { country: 'Russia',  city: 'Saint Petersburg' }\n */\nfunction sortCitiesArray(arr) {\n   return arr.sort((a,b)=> (a.country.localeCompare(b.country)\n   || a.city.localeCompare(b.city)));\n}\n\n/**\n * Creates an indentity matrix of the specified size\n * \n * @param {number} n\n * @return {array}\n * \n * @example\n *     1  => [[1]]\n *  \n *     2 => [[1,0],\n *           [0,1]]\n * \n *          [[1,0,0,0,0],\n *           [0,1,0,0,0],\n *     5 =>  [0,0,1,0,0],\n *           [0,0,0,1,0],\n *           [0,0,0,0,1]]   \n */\nfunction getIdentityMatrix(n) {\n   return Array.from({ length: n}, (element, index) => {\n      element = new Array(n).fill(0);\n      element[index] = 1;\n      return element;\n   });\n\n}\n\n/**\n * Creates an array of integers from the specified start to end (inclusive)\n * \n * @param {number} start\n * @param {number} end\n * @return {array}\n * \n * @example\n *     1, 5  => [ 1, 2, 3, 4, 5 ]\n *    -2, 2  => [ -2, -1, 0, 1, 2 ]\n *     0, 100 => [ 0, 1, 2, ..., 100 ]\n *     3  3,  => [ 3 ]\n */\nfunction getIntervalArray(start, end) {\n   return Array.from({ length: end-start+1}, (element, index) => start+index);\n}\n\n/**\n * Returns array containing only unique values from the specified array.\n *\n * @param {array} arr\n * @return {array}\n * \n * @example\n *   [ 1, 2, 3, 3, 2, 1 ] => [ 1, 2, 3 ]\n *   [ 'a', 'a', 'a', 'a' ]  => [ 'a' ]\n *   [ 1, 1, 2, 2, 3, 3, 4, 4] => [ 1, 2, 3, 4]\n */\nfunction distinct(arr) {\n   var set = new Set(arr);\n   return [...set];\n}\n\n/**\n * Groups elements of the specified array by key.\n * Returns multimap of keys extracted from array elements via keySelector callback\n * and values extracted via valueSelector callback.\n * See: https://en.wikipedia.org/wiki/Multimap\n *\n * @param {array} array\n * @param {Function} keySelector\n * @param {Function} valueSelector\n * @return {Map}\n *\n * @example\n *   group([\n *      { country: 'Belarus', city: 'Brest' },\n *      { country: 'Russia', city: 'Omsk' },\n *      { country: 'Russia', city: 'Samara' },\n *      { country: 'Belarus', city: 'Grodno' },\n *      { country: 'Belarus', city: 'Minsk' },\n *      { country: 'Poland', city: 'Lodz' }\n *     ], \n *     item => item.country, \n *     item => item.city\n *   )\n *            => \n *   Map {\n *    \"Belarus\" => [\"Brest\", \"Grodno\", \"Minsk\"],\n *    \"Russia\" => [\"Omsk\", \"Samara\"], \n *    \"Poland\" => [\"Lodz\"]\n *   }\n */\nfunction group(array, keySelector, valueSelector) {\n   var map = new Map();\n   array.map((element) => {\n      var key = keySelector(element);\n      var value = valueSelector(element);\n      if (map.has(key)) map.get(key).push(value);\n      else map.set(key, [value]);\n   });\n   return map;\n}\n\n\n/**\n * Projects each element of the specified array to a sequence and flattens the resulting sequences into one array.\n *\n * @param {array} arr\n * @param {Function} childrenSelector, a transform function to apply to each element that returns an array of children\n * @return {array}\n * \n * @example\n *   [[1, 2], [3, 4], [5, 6]], (x) => x     =>   [ 1, 2, 3, 4, 5, 6 ]\n *   ['one','two','three'], x=>x.split('')  =>   ['o','n','e','t','w','o','t','h','r','e','e']\n */\nfunction selectMany(arr, childrenSelector) {\n   return arr.reduce((element, index)=> element.concat(childrenSelector(index)), []);\n}\n\n\n/**\n * Returns an element from the multidimentional array by the specified indexes.\n *\n * @param {array} arr\n * @param {array} indexes\n * @return {any} element from array\n * \n * @example\n *   [[1, 2], [3, 4], [5, 6]], [0,0]  => 1        (arr[0][0]) \n *   ['one','two','three'], [2]       => 'three'  (arr[2]) \n *   [[[ 1, 2, 3]]], [ 0, 0, 1 ]      => 2        (arr[0][0][1])\n */\nfunction getElementByIndexes(arr, indexes) {\n   indexes.map((element) => arr = arr[element]);\n   return arr;\n}\n\n\n/**\n * Swaps the head and tail of the specified array:\n * the head (first half) of array move to the end, the tail (last half) move to the start. \n * The middle element (if exists) leave on the same position.\n * \n *  \n * @param {array} arr\n * @return {array}\n * \n * @example\n *   [ 1, 2, 3, 4, 5 ]   =>  [ 4, 5, 3, 1, 2 ]\n *    \\----/   \\----/         \n *     head     tail \n *\n *   [ 1, 2 ]  => [ 2, 1 ] \n *   [ 1, 2, 3, 4, 5, 6, 7, 8 ]   =>  [ 5, 6, 7, 8, 1, 2, 3, 4 ]   \n * \n */\n//переделать в один map\nfunction swapHeadAndTail(arr) {\n   var alen = arr.length;\n   var a = arr.length;\n   var head = arr.splice(0, alen/2);\n   var tail;\n   if(a%2 !== 0) tail = arr.splice(1, alen);\n   else tail = arr.splice(0, alen);\n   return tail.concat(arr).concat(head);\n}\n\n\nmodule.exports = {\n    findElement: findElement,\n    generateOdds: generateOdds,\n    doubleArray: doubleArray,\n    getArrayOfPositives: getArrayOfPositives,\n    getArrayOfStrings: getArrayOfStrings,\n    removeFalsyValues: removeFalsyValues,\n    getUpperCaseStrings: getUpperCaseStrings,\n    getStringsLength: getStringsLength,\n    insertItem: insertItem,\n    getHead: getHead,\n    getTail: getTail,\n    toCsvText: toCsvText,\n    toStringList: toStringList,\n    toArrayOfSquares: toArrayOfSquares,\n    getMovingSum: getMovingSum,\n    getSecondItems: getSecondItems,\n    propagateItemsByPositionIndex: propagateItemsByPositionIndex,\n    get3TopItems: get3TopItems,\n    getPositivesCount: getPositivesCount,\n    sortDigitNamesByNumericOrder: sortDigitNamesByNumericOrder,\n    getItemsSum: getItemsSum,\n    getFalsyValuesCount: getFalsyValuesCount,\n    findAllOccurences: findAllOccurences,\n    sortCitiesArray: sortCitiesArray,\n    getIdentityMatrix: getIdentityMatrix,\n    getIntervalArray: getIntervalArray,\n    distinct: distinct,\n    group: group,\n    selectMany: selectMany,\n    getElementByIndexes: getElementByIndexes,\n    swapHeadAndTail: swapHeadAndTail\n};\n"]}