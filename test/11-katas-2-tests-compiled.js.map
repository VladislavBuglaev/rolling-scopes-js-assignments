{"version":3,"sources":["11-katas-2-tests.js"],"names":[],"mappings":"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","file":"11-katas-2-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/11-katas-2-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('11-katas-2-tasks', function() {\n\n    it.optional('parseBankAccount should return the bank account number from the specified string', () => {\n        [\n            {\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '| || || || || || || || || |\\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n',\n                result: 0\n            },{\n                text:   '                           \\n'+\n                        '  |  |  |  |  |  |  |  |  |\\n'+\n                        '  |  |  |  |  |  |  |  |  |\\n',\n                result: 111111111,\n\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        ' _| _| _| _| _| _| _| _| _|\\n'+\n                        '|_ |_ |_ |_ |_ |_ |_ |_ |_ \\n',\n                result: 222222222\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        ' _| _| _| _| _| _| _| _| _|\\n'+\n                        ' _| _| _| _| _| _| _| _| _|\\n',\n                result: 333333333\n            },{\n                text:   '                           \\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n'+\n                        '  |  |  |  |  |  |  |  |  |\\n',\n                result: 444444444\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '|_ |_ |_ |_ |_ |_ |_ |_ |_ \\n'+\n                        ' _| _| _| _| _| _| _| _| _|\\n',\n                result: 555555555\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '|_ |_ |_ |_ |_ |_ |_ |_ |_ \\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n',\n                result: 666666666\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '  |  |  |  |  |  |  |  |  |\\n'+\n                        '  |  |  |  |  |  |  |  |  |\\n',\n                result: 777777777\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n',\n                result: 888888888\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '|_||_||_||_||_||_||_||_||_|\\n'+\n                        ' _| _| _| _| _| _| _| _| _|\\n',\n                result: 999999999\n            },{\n                text:   '    _  _     _  _  _  _  _ \\n'+\n                        '  | _| _||_||_ |_   ||_||_|\\n'+\n                        '  ||_  _|  | _||_|  ||_| _|\\n',\n                result: 123456789\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '| | _| _|| ||_ |_   ||_||_|\\n'+\n                        '|_||_  _||_| _||_|  ||_| _|\\n',\n                result: 23056789\n            },{\n                text:   ' _  _  _  _  _  _  _  _  _ \\n'+\n                        '|_| _| _||_||_ |_ |_||_||_|\\n'+\n                        '|_||_  _||_| _||_| _||_| _|\\n',\n                result: 823856989\n            }\n        ].forEach(data => {\n            assert.equal(\n                tasks.parseBankAccount(data.text),\n                data.result,\n                `${data.text} has not parsed correctly:`\n            );\n        });\n    });\n\n\n    it.optional('wrapText should return the sequence of lines from the specified string', () => {\n        const text = 'The String global object is a constructor for strings, or a sequence of characters.';\n        [\n            {\n                cols:  26,\n                expected: [\n                    'The String global object',\n                    'is a constructor for',\n                    'strings, or a sequence of',\n                    'characters.'\n                ]\n            },{\n                cols: 12,\n                expected: [\n                    'The String',\n                    'global',\n                    'object is a',\n                    'constructor',\n                    'for strings,',\n                    'or a',\n                    'sequence of',\n                    'characters.'\n                ]\n            },{\n                cols: Number.MAX_SAFE_INTEGER,\n                expected: [ text ]\n            }\n        ].forEach(data => {\n            assert.deepEqual(\n                Array.from(tasks.wrapText(text, data.cols)),\n                data.expected,\n                `'${text}' has not wrapped correctly for ${data.cols} columns:`\n            );\n        });\n    });\n\n\n    it.optional('getPokerHandRank should return the rank of the specified poker hand', () => {\n        var rankNames = [];\n        var PokerRank = tasks.PokerRank;\n        rankNames[PokerRank.StraightFlush] = 'StraightFlush';\n        rankNames[PokerRank.FourOfKind] = 'FourOfKind';\n        rankNames[PokerRank.FullHouse] = 'FullHouse';\n        rankNames[PokerRank.Flush] = 'Flush';\n        rankNames[PokerRank.Straight] = 'Straight';\n        rankNames[PokerRank.ThreeOfKind] = 'ThreeOfKind';\n        rankNames[PokerRank.TwoPairs] = 'TwoPairs';\n        rankNames[PokerRank.OnePair] = 'OnePair';\n        rankNames[PokerRank.HighCard] = 'HighCard';\n\n        [\n            {\n                hand: [ '4♥','5♥','6♥','7♥','8♥' ],\n                expected: PokerRank.StraightFlush\n            },{\n                hand: [ 'A♣','K♣','Q♣','J♣','10♣' ],\n                expected: PokerRank.StraightFlush\n            },{\n                hand: [ '10♦','9♦','6♦','7♦','8♦' ],\n                expected: PokerRank.StraightFlush\n            },{\n                hand: [ 'A♠','4♠','3♠','5♠','2♠' ],\n                expected: PokerRank.StraightFlush\n            },{\n                hand: [ '4♣','4♦','4♥','4♠','10♥' ],\n                expected: PokerRank.FourOfKind\n            },{\n                hand: [ '2♣','A♦','A♣','A♠','A♥' ],\n                expected: PokerRank.FourOfKind\n            },{\n                hand: [ '10♣','10♦','6♦','10♠','10♥' ],\n                expected: PokerRank.FourOfKind\n            },{\n                hand: [ '4♣','4♦','5♦','5♠','5♥' ],\n                expected: PokerRank.FullHouse\n            },{\n                hand: [ 'A♣','2♦','A♦','2♠','2♥' ],\n                expected: PokerRank.FullHouse\n            },{\n                hand: [ '4♣','4♦','5♦','5♠','5♥' ],\n                expected: PokerRank.FullHouse\n            },{\n                hand: [ '4♣','5♣','6♣','7♣','Q♣' ],\n                expected: PokerRank.Flush\n            },{\n                hand: [ 'A♦','2♦','3♦','4♦','K♦' ],\n                expected: PokerRank.Flush\n            },{\n                hand: [ 'A♠','Q♠','J♠','10♠','9♠' ],\n                expected: PokerRank.Flush\n            },{\n                hand: [ '2♥','4♥','5♥','7♥','A♥' ],\n                expected: PokerRank.Flush\n            },{\n                hand: [ '2♠','3♥','4♥','5♥','6♥' ],\n                expected: PokerRank.Straight\n            },{\n                hand: [ 'A♠','K♦','Q♦','J♦','10♦' ],\n                expected: PokerRank.Straight\n            },{\n                hand: [ '10♥','8♥','9♠','7♥','6♦' ],\n                expected: PokerRank.Straight\n            },{\n                hand: [ '2♥','4♦','5♥','A♦','3♠' ],\n                expected: PokerRank.Straight\n            },{\n                hand: [ '2♥','2♠','2♦','7♥','A♥' ],\n                expected: PokerRank.ThreeOfKind\n            },{\n                hand: [ '2♥','4♥','A♥','A♦','A♠' ],\n                expected: PokerRank.ThreeOfKind\n            },{\n                hand: [ '10♥','9♥','10♦','J♥','10♠' ],\n                expected: PokerRank.ThreeOfKind\n            },{\n                hand: [ '2♥','4♦','4♥','A♦','A♠' ],\n                expected: PokerRank.TwoPairs\n            },{\n                hand: [ '3♥','4♥','A♥','3♦','A♠' ],\n                expected: PokerRank.TwoPairs\n            },{\n                hand: [ '5♥','6♥','A♥','6♦','5♠' ],\n                expected: PokerRank.TwoPairs\n            },{\n                hand: [ '2♥','4♦','5♥','A♦','A♠' ],\n                expected: PokerRank.OnePair\n            },{\n                hand: [ '3♥','4♥','10♥','3♦','A♠' ],\n                expected: PokerRank.OnePair\n            },{\n                hand: [ '5♥','6♥','7♥','8♦','5♠' ],\n                expected: PokerRank.OnePair\n            },{\n                hand: [ '3♥','4♥','5♥','7♦','8♥' ],\n                expected: PokerRank.HighCard\n            },{\n                hand: [ 'A♥','K♥','Q♥','J♦','5♠' ],\n                expected: PokerRank.HighCard\n            },{\n                hand: [ 'A♥','K♥','Q♥','2♦','3♠' ],\n                expected: PokerRank.HighCard\n            }\n        ].forEach(data => {\n            var actual = tasks.getPokerHandRank(data.hand);\n            assert(\n                actual >= PokerRank.HighCard,\n                'Invalid return value. The return value should be >= PokerRank.HighCard'\n            );\n            assert(\n                actual <= PokerRank.StraightFlush,\n                'Invalid return value. The return value should be <= PokerRank.StraightFlush'\n            );\n            assert(\n                actual == data.expected,\n                `'${data.hand}' is ranked as ${rankNames[data.expected]}, but actually ${rankNames[actual]} `\n            );\n        });\n    });\n\n\n    it.optional('getFigureRectangles should return the sequence of rectagles parts of the specified figure', () => {\n        [\n            {\n                figure: '+------------+\\n'+\n                        '|            |\\n'+\n                        '|            |\\n'+\n                        '|            |\\n'+\n                        '+------+-----+\\n'+\n                        '|      |     |\\n'+\n                        '|      |     |\\n'+\n                        '+------+-----+\\n',\n                expected: [\n                        '+------------+\\n'+\n                        '|            |\\n'+\n                        '|            |\\n'+\n                        '|            |\\n'+\n                        '+------------+\\n',\n\n                        '+------+\\n'+\n                        '|      |\\n'+\n                        '|      |\\n'+\n                        '+------+\\n',\n\n                        '+-----+\\n'+\n                        '|     |\\n'+\n                        '|     |\\n'+\n                        '+-----+\\n'\n                ]\n            },{\n                figure: '   +-----+     \\n'+\n                        '   |     |     \\n'+\n                        '+--+-----+----+\\n'+\n                        '|             |\\n'+\n                        '|             |\\n'+\n                        '+-------------+\\n',\n                expected: [\n                        '+-----+\\n'+\n                        '|     |\\n'+\n                        '+-----+\\n',\n\n                        '+-------------+\\n'+\n                        '|             |\\n'+\n                        '|             |\\n'+\n                        '+-------------+\\n'\n                ]\n            },{\n                figure: '   +--+   \\n'+\n                        '   |  |   \\n'+\n                        '+--+--+--+\\n'+\n                        '|     |  |\\n'+\n                        '+--+--+--+\\n'+\n                        '   |  |   \\n'+\n                        '   +--+   \\n',\n                expected: [\n                        '+--+\\n'+\n                        '|  |\\n'+\n                        '+--+\\n',\n\n                        '+--+\\n'+\n                        '|  |\\n'+\n                        '+--+\\n',\n\n                        '+--+\\n'+\n                        '|  |\\n'+\n                        '+--+\\n',\n\n                        '+-----+\\n'+\n                        '|     |\\n'+\n                        '+-----+\\n'\n                 ]\n            },{\n                figure: '++++\\n'+\n                        '++++\\n',\n                expected: [\n                        '++\\n'+\n                        '++\\n',\n\n                        '++\\n'+\n                        '++\\n',\n\n                        '++\\n'+\n                        '++\\n',\n                ]\n            }\n        ].forEach(data => {\n            var actual = Array.from(tasks.getFigureRectangles(data.figure)).sort();\n            var expected = data.expected.sort();\n            assert.deepEqual(\n                actual,\n                expected,\n                `Figure \\n${data.figure} has the following parts:\\n${expected.join(',\\n')} but actually :\\n${actual.join(',\\n')}`\n            );\n        });\n    });\n\n});\n"]}