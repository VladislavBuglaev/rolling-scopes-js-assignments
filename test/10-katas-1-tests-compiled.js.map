{"version":3,"sources":["10-katas-1-tests.js"],"names":[],"mappings":"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","file":"10-katas-1-tests-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar tasks = require('../task/10-katas-1-tasks');\nit.optional = require('../extensions/it-optional');\n\ndescribe('10-katas-1-tasks', function() {\n\n    it.optional('createCompassPoints should return the 32 compass points', () => {\n        var expected = [\n            { abbreviation : 'N',     azimuth :   0.00 },\n            { abbreviation : 'NbE',   azimuth :  11.25 },\n            { abbreviation : 'NNE',   azimuth :  22.50 },\n            { abbreviation : 'NEbN',  azimuth :  33.75 },\n\n            { abbreviation : 'NE',    azimuth :  45.00 },\n            { abbreviation : 'NEbE',  azimuth :  56.25 },\n            { abbreviation : 'ENE',   azimuth :  67.50 },\n            { abbreviation : 'EbN',   azimuth :  78.75 },\n\n            { abbreviation : 'E',     azimuth :  90.00 },\n            { abbreviation : 'EbS',   azimuth : 101.25 },\n            { abbreviation : 'ESE',   azimuth : 112.50 },\n            { abbreviation : 'SEbE',  azimuth : 123.75 },\n\n            { abbreviation : 'SE',    azimuth : 135.00 },\n            { abbreviation : 'SEbS',  azimuth : 146.25 },\n            { abbreviation : 'SSE',   azimuth : 157.50 },\n            { abbreviation : 'SbE',   azimuth : 168.75 },\n\n            { abbreviation : 'S',     azimuth : 180.00 },\n            { abbreviation : 'SbW',   azimuth : 191.25 },\n            { abbreviation : 'SSW',   azimuth : 202.50 },\n            { abbreviation : 'SWbS',  azimuth : 213.75 },\n\n            { abbreviation : 'SW',    azimuth : 225.00 },\n            { abbreviation : 'SWbW',  azimuth : 236.25 },\n            { abbreviation : 'WSW',   azimuth : 247.50 },\n            { abbreviation : 'WbS',   azimuth : 258.75 },\n\n            { abbreviation : 'W',     azimuth : 270.00 },\n            { abbreviation : 'WbN',   azimuth : 281.25 },\n            { abbreviation : 'WNW',   azimuth : 292.50 },\n            { abbreviation : 'NWbW',  azimuth : 303.75 },\n\n            { abbreviation : 'NW',    azimuth : 315.00 },\n            { abbreviation : 'NWbN',  azimuth : 326.25 },\n            { abbreviation : 'NNW',   azimuth : 337.50 },\n            { abbreviation : 'NbW',   azimuth : 348.75 }\n\n        ];\n\n        assert.deepEqual(\n                tasks.createCompassPoints(),\n                expected\n            );\n\n    });\n\n\n    it.optional('expandBraces should expand the braces from pattern string', () => {\n        [\n            /*{\n               str: '~/{Downloads,Pictures}/!*.{jpg,gif,png}',\n               result : [\n                    '~/Downloads/!*.gif',\n                    '~/Downloads/!*.jpg',\n                    '~/Downloads/!*.png',\n                    '~/Pictures/!*.gif',\n                    '~/Pictures/!*.jpg',\n                    '~/Pictures/!*.png'\n               ]\n            }, */{\n               str: 'It{{em,alic}iz,erat}e{d,}, please.',\n               result : [\n                    'Italicize, please.',\n                    'Italicized, please.',\n                    'Itemize, please.',\n                    'Itemized, please.',\n                    'Iterate, please.',\n                    'Iterated, please.'\n               ]\n            },{\n               str: 'thumbnail.{png,jp{e,}g}',\n               result : [\n                    'thumbnail.jpeg',\n                    'thumbnail.jpg',\n                    'thumbnail.png'\n               ]\n            },{\n               str: 'nothing to do',\n               result : [\n                    'nothing to do'\n               ]\n            }\n        ].forEach(data => {\n            var actual = Array.from(tasks.expandBraces(data.str));\n            actual.sort();\n            assert.deepEqual(\n                actual,\n                data.result,\n                `'${data.str}' have not expanded correctly:`\n            );\n        });\n    });\n\n\n    it.optional('getZigZagMatrix should create a square matrix with zigzag path', () => {\n        [\n             [\n                [0]\n             ],[\n                [ 0, 1 ],\n                [ 2, 3 ]\n             ],[\n                [ 0, 1, 5 ],\n                [ 2, 4, 6 ],\n                [ 3, 7, 8 ]\n             ],[\n                [ 0,  1,  5,  6 ],\n                [ 2,  4,  7, 12 ],\n                [ 3,  8, 11, 13 ],\n                [ 9, 10, 14, 15 ]\n             ],[\n                [  0,  1,  5,  6, 14 ],\n                [  2,  4,  7, 13, 15 ],\n                [  3,  8, 12, 16, 21 ],\n                [  9, 11, 17, 20, 22 ],\n                [ 10, 18, 19, 23, 24 ],\n             ],[\n                [  0,  1,  5,  6, 14, 15 ],\n                [  2,  4,  7, 13, 16, 25 ],\n                [  3,  8, 12, 17, 24, 26 ],\n                [  9, 11, 18, 23, 27, 32 ],\n                [ 10, 19, 22, 28, 31, 33 ],\n                [ 20, 21, 29, 30, 34, 35 ],\n             ],[\n                [  0,  1,  5,  6, 14, 15, 27 ],\n                [  2,  4,  7, 13, 16, 26, 28 ],\n                [  3,  8, 12, 17, 25, 29, 38 ],\n                [  9, 11, 18, 24, 30, 37, 39 ],\n                [ 10, 19, 23, 31, 36, 40, 45 ],\n                [ 20, 22, 32, 35, 41, 44, 46 ],\n                [ 21, 33, 34, 42, 43, 47, 48 ],\n             ]\n         ].forEach(data => {\n            var actual = tasks.getZigZagMatrix(data.length);\n            assert.deepEqual(\n                actual,\n                data,\n                `Zigzag matrix of ${data.length} size has not been produced correctly:`\n            );\n        });\n    });\n\n\n    it.optional('canDominoesMakeRow should answer if specified subset of dominoes can be arranged in a row', () => {\n        [\n             [\n                 [0,1], [1,1]\n             ],[\n                 [1,3], [2,3], [1,4], [2,4], [1,5], [2,5]\n             ],[\n                 [1,1], [1,2], [2,3], [2,5], [2,6], [3,6], [5,6], [6,6]\n             ]\n         ].forEach(data => {\n            var actual = tasks.canDominoesMakeRow(data);\n            assert.equal(\n                actual,\n                true,\n                `[${data.join('],[')}] can be arrangement in a row`\n            );\n        });\n\n\n        [\n             [\n                 [0,1], [2,3]\n             ],[\n                 [1,1], [2,2], [1,5], [5,6], [6,3]\n             ],[\n                 [0,0], [0,1], [0,2], [0,3], [1,1], [1,2], [1,3], [2,2], [2,3], [3,3]\n             ]\n         ].forEach(data => {\n            var actual = tasks.canDominoesMakeRow(data);\n            assert.equal(\n                actual,\n                false,\n                `[${data.join('],[')}] can't be arrangement in a row`\n            );\n        });\n\n    });\n\n\n    it.optional('extractRanges should return string expression of ordered list of integers', () => {\n        [\n            {\n               nums:   [ 0, 1, 2, 3, 4, 5 ],\n               result: '0-5'\n            },{\n               nums:   [ 1, 4, 5 ],\n               result: '1,4,5'\n            },{\n               nums:   [ 0, 1, 2, 5, 7, 8, 9],\n               result: '0-2,5,7-9'\n            },{\n               nums:   [ 1, 2, 4, 5],\n               result: '1,2,4,5'\n            },{\n               nums:   [ 0,  1,  2,  4,  6,  7,  8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n                         25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39 ],\n               result: '0-2,4,6-8,11,12,14-25,27-33,35-39'\n            },\n        ].forEach(data => {\n            var actual = tasks.extractRanges(data.nums);\n            assert.equal(\n                actual,\n                data.result,\n                `[${data.nums}] have not expanded correctly:`\n            );\n        });\n    });\n\n});\n"]}